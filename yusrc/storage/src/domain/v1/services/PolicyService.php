<?php

namespace yubundle\storage\domain\v1\services;

use yii\helpers\ArrayHelper;
use yii2rails\domain\data\Query;
use yubundle\storage\domain\v1\entities\PolicyEntity;
use yubundle\storage\domain\v1\interfaces\services\PolicyInterface;
use yii2rails\domain\services\base\BaseActiveService;

/**
 * Class PolicyService
 * 
 * @package yubundle\storage\domain\v1\services
 * 
 * @property-read \yubundle\storage\domain\v1\Domain $domain
 * @property-read \yubundle\storage\domain\v1\interfaces\repositories\PolicyInterface $repository
 */
class PolicyService extends BaseActiveService implements PolicyInterface {

    public function create($data) {
        $policyEntity = new PolicyEntity();
        $policyEntity->service_id = ArrayHelper::getValue($data, 'service_id', null);
        $policyEntity->allow_extensions = ArrayHelper::getValue($data, 'allow_extensions', null);
        $policyEntity->allow_types = ArrayHelper::getValue($data, 'allow_types', null);
        $policyEntity->file_size = ArrayHelper::getValue($data, 'file_size', null);
        $policyEntity->role = ArrayHelper::getValue($data, 'role', null);
        $policyEntity->space_size = ArrayHelper::getValue($data, 'space_size', null);
        $policyEntity->validate();
        return parent::create($data); // TODO: Change the autogenerated stub
    }

    public function oneByRole($role, Query $query = null) {
        $query = Query::forge($query);
        $query->andWhere(['role' => $role]);
        return parent::one($query); // TODO: Change the autogenerated stub
    }
    
    public function oneByRoles($roleCollection, Query $query = null) {
        $query = Query::forge($query);
        //$query->select(['MAX(file_size) as file_size, MAX(space_size) as space_size, max(char_length(allow_types)) AS allow_types']);
        $query->andWhere(['role' => $roleCollection]);
        $policyEntityCollection = parent::all($query);
        $userPolicyEntity = new PolicyEntity();
        /** @var PolicyEntity $policyEntity */
        foreach ($policyEntityCollection as $policyEntity) {
            if ($policyEntity->file_size != null && $userPolicyEntity->file_size < $policyEntity->file_size) {
                $userPolicyEntity->file_size = $policyEntity->file_size;
            } else if ($policyEntity->file_size == null) {
                $userPolicyEntity->file_size = null;
            }
            if ($policyEntity->space_size != null && $userPolicyEntity->space_size < $policyEntity->space_size) {
                $userPolicyEntity->space_size = $policyEntity->space_size;
            } else if ($policyEntity->space_size == null) {
                $userPolicyEntity->space_size = null;
            }
            $userPolicyEntity->allow_types = ArrayHelper::merge($userPolicyEntity->allow_types, $policyEntity->allow_types);
            $userPolicyEntity->allow_extensions = ArrayHelper::merge($userPolicyEntity->allow_extensions, $policyEntity->allow_extensions);
        }
        $userPolicyEntity->allow_types = array_unique($userPolicyEntity->allow_types);
        $userPolicyEntity->allow_extensions = array_unique($userPolicyEntity->allow_extensions);
        return $userPolicyEntity;
    }

}

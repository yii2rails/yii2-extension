<?php

namespace yubundle\staff\domain\v1\services;

use App;
use Codeception\Lib\Connector\Yii2\Logger;
use yii\db\Expression;
use yii\debug\models\search\Log;
use yii\helpers\FileHelper;
use yii\log\EmailTarget;
use yii\widgets\Spaceless;
use yii2rails\domain\enums\JoinEnum;
use yii2rails\extension\yii\helpers\ArrayHelper;
use yubundle\staff\domain\v1\entities\DivisionEntity;
use yubundle\staff\domain\v1\interfaces\services\DivisionInterface;
use yii2rails\domain\behaviors\query\QueryFilter;
use yii\data\ArrayDataProvider;
use yii2rails\domain\data\Query;
use yii2rails\domain\services\base\BaseActiveService;
use yubundle\user\domain\v1\entities\PersonEntity;

/**
 * Class DivisionService
 * 
 * @package yubundle\staff\domain\v1\services
 * 
 * @property-read \yubundle\staff\domain\v1\Domain $domain
 * @property-read \yubundle\staff\domain\v1\interfaces\repositories\DivisionInterface $repository
 */
class DivisionService extends BaseActiveService implements DivisionInterface {

    public function behaviors()
    {
        $companyId = \App::$domain->account->auth->identity->company_id;
        return [
            [
                'class' => QueryFilter::class,
                'method' => 'andWhere',
                'params' => ['company_id' => $companyId]
            ],
        ];
    }

    public function tree(Query $query = null) {
        $query = Query::forge($query);
        $query->with(['workers.person', 'workers.post']);
        /** @var DivisionEntity $all */
        $all = $this->domain->division->all($query);
        $divisionTree = $this->makeTree($all);
        $divisionTree = $this->cleanDivisionTree($divisionTree);
        return $divisionTree;
    }

    public function makeTree($divisionCollection, $treeLevel = null, $treeCollection = null) {
        if (count($divisionCollection) == 0) {
            return $treeCollection;
        }

        $hasChanged = false;
        foreach ($divisionCollection as $divisionEntity) {
            if ($divisionEntity->parent_id == $treeLevel) {
                $treeCollection[] = $divisionEntity;
                $hasChanged = true;
            }
        }

        if ($hasChanged == true) {
            $divisionCollection = $this->cleanCollection($divisionCollection, $treeLevel);
            foreach ($treeCollection as $divisionEntity) {
                if (is_object($divisionEntity)) {
                    $divisionEntity->child = $this->makeTree($divisionCollection,  $divisionEntity->id);
                }
            }
            return $treeCollection;
        } else {
            return;
        }
    }

    private function cleanCollection($pulledCollection, $level) {
        $newCollection = [];
        foreach ($pulledCollection as $entity) {
            if ($entity->parent_id != $level) {
                array_push($newCollection, $entity);
            }
        }
        return $newCollection;
    }

    private function cleanDivisionTree($divisionTree) {
        if(!empty($divisionTree)) {
            $cleanedDivisionTree = [];

            foreach ($divisionTree as $divisionEntity) {
                if (!empty($divisionEntity->workers)) {
                    array_push($cleanedDivisionTree, $divisionEntity);
                } else if (!empty($divisionEntity) && is_object($divisionEntity)) {
                    $checkChildCollection = $this->cleanDivisionTree($divisionEntity->child);
                    if (!empty($checkChildCollection) && count($checkChildCollection) > 0) {
                        array_push($cleanedDivisionTree, $divisionEntity);
                    }
                }
            }

            foreach ($cleanedDivisionTree as $divisionEntity) {
                if (!empty($divisionEntity->child)) {
                    $divisionEntity->child = $this->cleanDivisionTree($divisionEntity->child);
                }
            }

            return $cleanedDivisionTree;
        } else {
            return null;
        }
    }

    public function create($data) {
        if (empty($data['parent_id'])) {
            $data['parent_id'] = null;
        }
        parent::create($data);
    }

    public function updateById($id, $data)
    {
        if ($data['parent_id'] == '') {
            $data['parent_id'] = null;
        }
        return parent::updateById($id, $data); // TODO: Change the autogenerated stub
    }
}